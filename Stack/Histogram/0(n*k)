# https://practice.geeksforgeeks.org/problems/maximum-rectangular-area-in-a-histogram-1587115620/1

# Here we had reduced the complexity by using stack to find nearest smallest integer on right and nearest smallest integer on left




class Solution:
    
    #Function to find largest rectangular area possible in a given histogram.
    def getMaxArea(self,arr):
        stack = []
        nsr_output = [1] * len(arr)
        for i in range(len(arr)-1, -1, -1):
            if len(stack) == 0:
                nsr_output[i] = len(arr)
                stack.append(i)
        
            else:
                while len(stack) != 0:
                    x = stack.pop()
            
                    if arr[x] < arr[i]:
                        stack.append(x)
                        stack.append(i)
                        nsr_output[i] = x
                        break
            
                else:
                    nsr_output[i] = len(arr)
                    stack.append(i)
                    
        stack = []
        nsl_output = [1] * len(arr)


        for i in range(0, len(arr)):
            if len(stack) == 0:
                nsl_output[i] = -1
                stack.append(i)
        
            else:
                while len(stack) != 0:
                    ele = stack.pop()
            
                    if arr[ele] < arr[i]:
                        nsl_output[i] = ele
                        stack.append(ele)
                        stack.append(i)
                        break
            
                else:
                    nsl_output[i] = -1
                    stack.append(i)
            


        max_area = 0
        
        for i in range(0, len(arr)):
            area = arr[i] * (nsr_output[i] - nsl_output[i] - 1)
            max_area = max(area, max_area)
            
        return max_area
